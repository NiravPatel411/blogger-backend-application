import { Component, OnInit, ÉµSafeHtml } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';

@Component({
  selector: 'app-blog',
  templateUrl: './blog.component.html',
  styleUrls: ['./blog.component.css']
})
export class BlogComponent implements OnInit {

  breadCrumbItems: Array<{}>;
  data: any;

  constructor(private sanitizer: DomSanitizer) { }

  ngOnInit() {
    this.breadCrumbItems = [{ label: 'Utility' }, { label: 'Starter Page', active: true }];
    this.data = this.sanitizer.bypassSecurityTrustHtml("<section class=\"post-content clearfix\" itemprop=\"articleBody\">\r\n<div class=\"wwsgd_new_visitor\" style=\"display:none;\"><\/div><div class=\"wwsgd_return_visitor\" style=\"display:none;\"><p style=\"border:thin dotted black; padding:3mm;\">If you have a few years of experience in the Java ecosystem, and you're interested in sharing that experience with the community (and getting paid for your work of course), have a look at the <a target=\"_blank\" href=\"\/contribution-guidelines\">\"Write for Us\" page<\/a>.\r\nCheers, Eugen<\/p><\/div><h2 data-id=\"overview\">1. Overview<\/h2>\r\n<div class=\"bd-anchor\" id=\"overview\"><\/div>\r\n<p>When we are building some sort of content management solution, we need to solve two problems. We need a place to store the files themselves, and we need some sort of database to index them.<\/p>\r\n<p>It's possible to store the content of the files in the database itself, or we could store the content somewhere else and index it with the database.<\/p>\r\n<p>In this article, we're going to illustrate both of these methods with a basic Image Archive Application. We'll also implement REST APIs for upload and download.<\/p>\r\n<h2 data-id=\"use-case\">2. Use Case<\/h2>\r\n<div class=\"bd-anchor\" id=\"use-case\"><\/div>\r\n<p>Our Image Archive Application will allow us to <strong>upload and download JPEG images<\/strong>.<\/p>\r\n<p>When we upload an image, the application will create a unique identifier for it. Then we can use this identifier to download it.<\/p>\r\n<p>We'll use a relational database, with <a href=\"\/the-persistence-layer-with-spring-data-jpa\">Spring Data JPA<\/a> and <a href=\"\/tag\/hibernate\/\">Hibernate<\/a>.<\/p>\r\n<h2 data-id=\"database-storage\">3. Database Storage<\/h2>\r\n<div class=\"bd-anchor\" id=\"database-storage\"><\/div>\r\n<p>Let's start with our database.<\/p>\r\n<h3 data-id=\"1-image-entity\">3.1. Image Entity<\/h3>\r\n<div class=\"bd-anchor\" id=\"1-image-entity\"><\/div>\r\n<p>First, let's create our <em>Image<\/em> entity:<\/p>\r\n<pre><code class=\"language-java\">@Entity\r\n\r\nclass Image {\r\n\r\n\r\n\r\n    @Id\r\n\r\n    @GeneratedValue\r\n\r\n    Long id;\r\n\r\n\r\n\r\n    @Lob\r\n\r\n    byte[] content;\r\n\r\n\r\n\r\n    String name;\r\n\r\n    \/\/ Getters and Setters\r\n\r\n}<\/code><\/pre>\r\n<p>The <em>id<\/em> field is annotated with <em>@GeneratedValue<\/em>. This means the database will create a unique identifier for each record we add. By indexing the images with these values, we don't need to worry about multiple uploads of the same image conflicting with each other.<\/p>\r\n<p>Second, we have the <a href=\"\/hibernate-lob\">Hibernate <em>@Lob<\/em> annotation<\/a>. It's how we tell JPA our <strong>intention of storing a potentially large binary<\/strong>.<\/p>\r\n<h3 data-id=\"2-image-repository\">3.2. Image Repository<\/h3>\r\n<div class=\"bd-anchor\" id=\"2-image-repository\"><\/div>\r\n<p>Next, we need a <strong>repository to connect to the database<\/strong>.<\/p>\r\n<p>We'll use the spring <a href=\"\/the-persistence-layer-with-spring-data-jpa\"><em>JpaRepository<\/em><\/a>:<\/p>\r\n<pre><code class=\"language-java\">@Repository\r\n\r\ninterface ImageDbRepository extends JpaRepository&lt;Image, Long&gt; {}<\/code><\/pre>\r\n<p>Now we're ready to save our images.\u00C2\u00A0 We just need a way to upload them to our application.<\/p>\r\n<h3 data-id=\"rest-controller\">4. REST Controller<\/h3>\r\n<div class=\"bd-anchor\" id=\"rest-controller\"><\/div>\r\n<p>We will use a <a href=\"\/spring-file-upload\"><em>MultipartFile<\/em> to upload<\/a> our images. Uploading will return the <em>imageId<\/em> we can use to download the image later.<\/p>\r\n<h3 data-id=\"1-image-upload\">4.1. Image Upload<\/h3>\r\n<div class=\"bd-anchor\" id=\"1-image-upload\"><\/div>\r\n<p>Let's start by creating our <em>ImageController <\/em>to support upload:<\/p>\r\n<pre><code class=\"language-java\">@RestController\r\n\r\nclass ImageController {\r\n\r\n\r\n\r\n    @Autowired\r\n\r\n    ImageDbRepository imageDbRepository;\r\n\r\n\r\n\r\n    @PostMapping\r\n\r\n    Long uploadImage(@RequestParam MultipartFile multipartImage) throws Exception {\r\n\r\n        Image dbImage = new Image();\r\n\r\n        dbImage.setName(multipartImage.getName());\r\n\r\n        dbImage.setContent(multipartImage.getBytes());\r\n\r\n\r\n\r\n        return imageDbRepository.save(dbImage)\r\n\r\n            .getId();\r\n\r\n    }\r\n\r\n}<\/code><\/pre>\r\n<p>The\u00C2\u00A0<em>MultipartFile<\/em> object contains the content and original name of the file. We use this to construct our <em>Image<\/em> object for storing in the database.<\/p>\r\n<p>This controller returns the generated id as the body of its response.<\/p>\r\n<h3 data-id=\"2-image-download\">4.2. Image Download<\/h3>\r\n<div class=\"bd-anchor\" id=\"2-image-download\"><\/div>\r\n<p>Now, let's add a download route<em>:<\/em><\/p>\r\n<pre><code class=\"language-java\">@GetMapping(value = \"\/image\/{imageId}\", produces = MediaType.IMAGE_JPEG_VALUE)\r\n\r\nResource downloadImage(@PathVariable Long imageId) {\r\n\r\n    byte[] image = imageRepository.findById(imageId)\r\n\r\n      .orElseThrow(() -&gt; new ResponseStatusException(HttpStatus.NOT_FOUND))\r\n\r\n      .getContent();\r\n\r\n\r\n\r\n    return new ByteArrayResource(image);\r\n\r\n}<\/code><\/pre>\r\n<p>The\u00C2\u00A0<em>imageId<\/em> path variable contains the id that was generated at upload. If an invalid id is provided, then we're using\u00C2\u00A0<em>ResponseStatusException<\/em> to return an HTTP response code 404 (Not Found).\u00C2\u00A0Otherwise, we're wrapping the stored file bytes in a <em>ByteArrayResource<\/em> which allows them to be downloaded.<\/p>\r\n<h2 data-id=\"database-image-archive-test\">5. Database Image Archive Test<\/h2>\r\n<div class=\"bd-anchor\" id=\"database-image-archive-test\"><\/div>\r\n<p>Now we're ready to test our Image Archive.<\/p>\r\n<p>First, let's build our application:<\/p>\r\n<pre><code class=\"language-bash\">mvn package<\/code><\/pre>\r\n<p>Second, let's start it up:<\/p>\r\n<pre><code class=\"language-bash\">java -jar target\/image-archive-0.0.1-SNAPSHOT.jar<\/code><\/pre>\r\n<h3 data-id=\"1-image-upload-test\">5.1. Image Upload Test<\/h3>\r\n<div class=\"bd-anchor\" id=\"1-image-upload-test\"><\/div>\r\n<p>After our application is running, we'll <strong>use the <a href=\"\/curl-rest\"><em>curl<\/em> command-line tool<\/a> to upload our image<\/strong>:<\/p>\r\n<pre><code class=\"language-bash\">curl -H \"Content-Type: multipart\/form-data\" \\\r\n\r\n  -F \"<a href=\"\/cdn-cgi\/l\/email-protection\" class=\"__cf_email__\" data-cfemail=\"0a63676b6d6f374a686b6f666e7f646d24607a6f6d\">[email\u00C2\u00A0protected]<\/a>\" http:\/\/localhost:8080\/image<\/code><\/pre>\r\n<p>As the upload service <strong>response is the <em>imageId<\/em><\/strong><em>,<\/em> and this is our first request, the output will be:<\/p>\r\n<pre><code class=\"language-java\">1<\/code><\/pre>\r\n<h3 data-id=\"2-image-download-test\">5.2. Image Download Test<\/h3>\r\n<div class=\"bd-anchor\" id=\"2-image-download-test\"><\/div>\r\n<p>Then we can download our image:<\/p>\r\n<pre><code class=\"language-bash\">curl -v http:\/\/localhost:8080\/image\/1 -o image.jpeg<\/code><\/pre>\r\n<p>The <em>-o image.jpeg<\/em> option will create a file named <em>image.jpeg<\/em> and store the response content in it:<\/p>\r\n<pre><code class=\"language-bash\">% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n\r\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0*   Trying ::1...\r\n\r\n* TCP_NODELAY set\r\n\r\n* Connected to localhost (::1) port 8080 (#0)\r\n\r\n&gt; GET \/image\/1 HTTP\/1.1\r\n\r\n&gt; Host: localhost:8080\r\n\r\n&gt; User-Agent: curl\/7.54.0\r\n\r\n&gt; Accept: *\/*\r\n\r\n&gt; \r\n\r\n&lt; HTTP\/1.1 200 \r\n\r\n&lt; Accept-Ranges: bytes\r\n\r\n&lt; Content-Type: image\/jpeg\r\n\r\n&lt; Content-Length: 9291<\/code><\/pre>\r\n<p>We got an HTTP\/1.1 200, which means that our download was successful.<\/p>\r\n<p>We could also try downloading the image in our browser by hitting <a href=\"http:\/\/localhost:8080\/image\/1\"><em>http:\/\/localhost:8080\/image\/1<\/em><\/a>.<\/p>\r\n<h2 data-id=\"separate-content-and-location\">6. Separate Content and Location<\/h2>\r\n<div class=\"bd-anchor\" id=\"separate-content-and-location\"><\/div>\r\n<p>So far, we're capable of uploading and downloading images within a database.<\/p>\r\n<p>Another good option is uploading the file content to a different location. Then we <strong>save<\/strong> <strong>only its filesystem <em>location<\/em> in the DB<\/strong>.<\/p>\r\n<p>For that we'll need to add a new field to our <em>Image<\/em> entity:<\/p>\r\n<pre><code class=\"language-java\">String location;<\/code><\/pre>\r\n<p>This will contain the logical path to the file in some external storage. In our case, <strong>it will be the path on our server's filesystem.\u00C2\u00A0<\/strong><\/p>\r\n<p>However, we can equally apply this idea to different Stores. For example, we could use cloud storage \u00E2\u0080\u0093 <a href=\"\/java-google-cloud-storage\">Google Cloud Storage<\/a> or <a href=\"\/aws-s3-java\">Amazon S3<\/a>. The location could also use a URI format, for example, <em>s3:\/\/somebucket\/path\/to\/file<\/em>.<\/p>\r\n<p>Our upload service, rather than writing the bytes of the file to the database, will store the file in the appropriate service \u00E2\u0080\u0093 in this case, the filesystem \u00E2\u0080\u0093 and will then put the location of the file into the database.<\/p>\r\n<h2 data-id=\"filesystem-storage\">7. Filesystem Storage<\/h2>\r\n<div class=\"bd-anchor\" id=\"filesystem-storage\"><\/div>");
  }

}
